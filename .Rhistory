#   size = 1.5, color = "#3f5a36", show.legend = TRUE) +
# geom_linerange(
#   aes(ymin = breakless_spell_began_earliest_no_NAs_local_time, ymax = breakless_spell_ended_latest_no_NAs_local_time, x = Master_ID_int_to_plot_low),
#   final_schedules_this_estab[!is.na(Master_ID_int)],
#   size = 1.5, color = "#4682b4", alpha = 0.6, show.legend = TRUE) +
geom_point(aes(y = time_local_time, x = Master_ID_int, color = ping_type, alpha = ping_type), all_known_pings, show.legend = TRUE) +
scale_color_manual(values = c("red", "#4682b4", "#3f5a36", "#444444"), breaks = c("break", "work", "Lower Bound", "Upper Bound")) +
scale_alpha_manual(values = c(0.6, 0.4, 0.8, 0.3), breaks = c("break", "work", "Lower Bound", "Upper Bound")) +
geom_linerange(aes(ymin = start, ymax = end, x = id, color = type, alpha = type), final_schedules_to_plot_long, size = 1.5, show.legend = TRUE) +
coord_flip() +
theme_cowplot() +
ylab("Local Time") +
theme(
axis.title.y = element_blank(),
plot.title = element_text(hjust = 0),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
plot.margin = margin(0.3,1.2,0.2,1.3, "cm"),
legend.position = "bottom",
legend.title = element_blank()
) +
ggtitle("Schedules by Worker") # +
ggsave("Kroger_Example_Schedules.pdf")
ggplot(what_looks_like_work_shifts) +
geom_histogram(aes(x = breakless_spell_duration_lb_hours), bins = 44)
ggplot(what_looks_like_work_shifts) +
geom_histogram(aes(x = breakless_spell_duration_lb_hours), binwidth = 60 * 30) +
scale_y_continuous(expand =  expansion(mult = c(0, 0.05))) +
ggtitle("Shift Duration") +
theme_cowplot() +
ylab("Count") +
xlab("Duration (Hours)") +
theme(
plot.title = element_text(hjust = 0)
)
ggplot(what_looks_like_work_shifts) +
geom_histogram(aes(x = breakless_spell_duration_lb_hours), binwidth = 0.5) +
scale_y_continuous(expand =  expansion(mult = c(0, 0.05))) +
ggtitle("Shift Duration") +
theme_cowplot() +
ylab("Count") +
xlab("Duration (Hours)") +
theme(
plot.title = element_text(hjust = 0)
)
ggsave("Shift_Durations.pdf")
ggplot(what_looks_like_work_shifts) +
geom_histogram(aes(x = diff_upper_lower_duration_hours), binwidth = 0.5) +
scale_y_continuous(expand =  expansion(mult = c(0, 0.05))) +
ggtitle("Uncertainty in Shift Duration") +
theme_cowplot() +
ylab("Count") +
xlab("Difference Between Lower Bound and Upper Bound on Shift Duration") +
theme(
plot.title = element_text(hjust = 0)
)
what_looks_like_work_shifts[, diff_upper_lower_duration_hours := breakless_spell_duration_ub_hours - breakless_spell_duration_lb_hours]
ggplot(what_looks_like_work_shifts) +
geom_histogram(aes(x = diff_upper_lower_duration_hours), binwidth = 0.5) +
scale_y_continuous(expand =  expansion(mult = c(0, 0.05))) +
ggtitle("Uncertainty in Shift Duration") +
theme_cowplot() +
ylab("Count") +
xlab("Difference Between Lower Bound and Upper Bound on Shift Duration") +
theme(
plot.title = element_text(hjust = 0)
)
ggplot(what_looks_like_work_shifts) +
geom_histogram(aes(x = diff_upper_lower_duration_hours), binwidth = 0.5) +
scale_y_continuous(expand =  expansion(mult = c(0, 0.05))) +
ggtitle("Uncertainty in Shift Duration") +
theme_cowplot() +
ylab("Count") +
xlab("Difference Between Lower Bound and Upper Bound on Shift Duration (Hours)") +
theme(
plot.title = element_text(hjust = 0)
)
this_estab_shape_id = 18186 # 136261 #
final_schedules_this_estab = work_shifts_without_breaks[Shape_ID == this_estab_shape_id]
this_estab_worker_ids = unique(final_schedules_this_estab[looks_like_a_work_shift == TRUE]$Master_ID_PostFeb17)
# this_estab = work_shifts_without_breaks[Shape_ID == this_estab_shape_id]
this_estab_pings = jun10[Shape_ID == this_estab_shape_id]
setkey(this_estab_pings, Master_ID_PostFeb17, Shape_ID, time)
this_estab_pings[, worker := Master_ID_PostFeb17 %in% this_estab_worker_ids]
this_estab_pings[, time := as_datetime(utc_timestamp)]
this_estab_pings[, ping_type := "work"]
this_estab_schedules = schedules[Shape_ID == this_estab_shape_id]
this_estab_break_pings =
unique(
rbind(
this_estab_schedules[spell_type == "break", .(time = spell_began_latest, Shape_ID, Master_ID_PostFeb17, ping_type = "break")],
this_estab_schedules[spell_type == "break", .(time = spell_ended_earliest, Shape_ID, Master_ID_PostFeb17, ping_type = "break")]
)
)[!is.na(time)]
all_known_pings = rbind(
this_estab_pings[Master_ID_PostFeb17 %in% this_estab_worker_ids, .(time, Shape_ID, Master_ID_PostFeb17, ping_type)],
this_estab_break_pings[Master_ID_PostFeb17 %in% this_estab_worker_ids]
)
setkey(all_known_pings, Master_ID_PostFeb17, Shape_ID, time)
all_known_pings[time_zones, on = .(Shape_ID), time_zone := i.time_zone]
all_known_pings[, Master_ID_int := .GRP, .(Master_ID_PostFeb17, Shape_ID)]
all_known_pings[, time_local_time := my_tz_to_UTC(time, time_zone), time_zone]
all_known_pings_ids = unique(all_known_pings[, .(Master_ID_int, Master_ID_PostFeb17)])
final_schedules_this_estab[all_known_pings_ids, on = .(Master_ID_PostFeb17), Master_ID_int := i.Master_ID_int]
final_schedules_this_estab[, Master_ID_int_to_plot_high := Master_ID_int - 0.2]
final_schedules_this_estab[, Master_ID_int_to_plot_low := Master_ID_int - 0.35]
final_schedules_this_estab[time_zones, on = .(Shape_ID), time_zone := i.time_zone]
final_schedules_this_estab[, breakless_spell_began_earliest_no_NAs_local_time := my_tz_to_UTC(breakless_spell_began_earliest_no_NAs, final_schedules_this_estab), time_zone]
this_estab_shape_id = 18186 # 136261 #
final_schedules_this_estab = work_shifts_without_breaks[Shape_ID == this_estab_shape_id]
this_estab_worker_ids = unique(final_schedules_this_estab[looks_like_a_work_shift == TRUE]$Master_ID_PostFeb17)
# this_estab = work_shifts_without_breaks[Shape_ID == this_estab_shape_id]
this_estab_pings = jun10[Shape_ID == this_estab_shape_id]
setkey(this_estab_pings, Master_ID_PostFeb17, Shape_ID, time)
this_estab_pings[, worker := Master_ID_PostFeb17 %in% this_estab_worker_ids]
this_estab_pings[, time := as_datetime(utc_timestamp)]
this_estab_pings[, ping_type := "work"]
this_estab_schedules = schedules[Shape_ID == this_estab_shape_id]
this_estab_break_pings =
unique(
rbind(
this_estab_schedules[spell_type == "break", .(time = spell_began_latest, Shape_ID, Master_ID_PostFeb17, ping_type = "break")],
this_estab_schedules[spell_type == "break", .(time = spell_ended_earliest, Shape_ID, Master_ID_PostFeb17, ping_type = "break")]
)
)[!is.na(time)]
all_known_pings = rbind(
this_estab_pings[Master_ID_PostFeb17 %in% this_estab_worker_ids, .(time, Shape_ID, Master_ID_PostFeb17, ping_type)],
this_estab_break_pings[Master_ID_PostFeb17 %in% this_estab_worker_ids]
)
setkey(all_known_pings, Master_ID_PostFeb17, Shape_ID, time)
all_known_pings[time_zones, on = .(Shape_ID), time_zone := i.time_zone]
all_known_pings[, Master_ID_int := .GRP, .(Master_ID_PostFeb17, Shape_ID)]
all_known_pings[, time_local_time := my_tz_to_UTC(time, time_zone), time_zone]
all_known_pings_ids = unique(all_known_pings[, .(Master_ID_int, Master_ID_PostFeb17)])
final_schedules_this_estab[all_known_pings_ids, on = .(Master_ID_PostFeb17), Master_ID_int := i.Master_ID_int]
final_schedules_this_estab[, Master_ID_int_to_plot_high := Master_ID_int - 0.2]
final_schedules_this_estab[, Master_ID_int_to_plot_low := Master_ID_int - 0.35]
final_schedules_this_estab[time_zones, on = .(Shape_ID), time_zone := i.time_zone]
final_schedules_this_estab[, breakless_spell_began_earliest_no_NAs_local_time := my_tz_to_UTC(breakless_spell_began_earliest_no_NAs, time_zone), time_zone]
final_schedules_this_estab[, breakless_spell_began_latest_no_NAs_local_time := my_tz_to_UTC(breakless_spell_began_latest_no_NAs, time_zone), time_zone]
final_schedules_this_estab[, breakless_spell_ended_earliest_no_NAs_local_time := my_tz_to_UTC(breakless_spell_ended_earliest_no_NAs, time_zone), time_zone]
final_schedules_this_estab[, breakless_spell_ended_latest_no_NAs_local_time := my_tz_to_UTC(breakless_spell_ended_latest_no_NAs, time_zone), time_zone]
# final_schedules_this_estab[, breakless_spell_began_earliest_no_NAs_local_time := unlist(map2(final_schedules_this_estab$breakless_spell_began_earliest_no_NAs, final_schedules_this_estab$time_zone, ~ format(.x, tz = .y)))]
# final_schedules_this_estab[, breakless_spell_began_earliest_no_NAs_local_time := format(final_schedules_this_estab$breakless_spell_began_earliest_no_NAs, final_schedules_this_estab$time_zone[1], ~ format(.x, tz = .y))]
final_schedules_to_plot_long = rbind(
final_schedules_this_estab[!is.na(Master_ID_int), .(start = breakless_spell_began_latest_no_NAs_local_time, end = breakless_spell_ended_earliest_no_NAs_local_time, id = Master_ID_int_to_plot_high, type = "Lower Bound")],
final_schedules_this_estab[!is.na(Master_ID_int), .(start = breakless_spell_began_earliest_no_NAs_local_time, end = breakless_spell_ended_latest_no_NAs_local_time, id = Master_ID_int_to_plot_low, type = "Upper Bound")]
)
ggplot() +
# geom_point(aes(y = time_local_time, x = Master_ID_int), all_known_pings[ping_type == "work"], color = "black", alpha = 0.2, show.legend = TRUE) +
# geom_point(data = all_known_pings[ping_type == "break"], mapping = aes(y = time_local_time, x = Master_ID_int), color = "red", alpha = 0.6, show.legend = TRUE)  +
# geom_linerange(
#   aes(ymin = breakless_spell_began_latest_no_NAs_local_time, ymax = breakless_spell_ended_earliest_no_NAs_local_time, x = Master_ID_int_to_plot_high),
#   final_schedules_this_estab[!is.na(Master_ID_int)],
#   size = 1.5, color = "#3f5a36", show.legend = TRUE) +
# geom_linerange(
#   aes(ymin = breakless_spell_began_earliest_no_NAs_local_time, ymax = breakless_spell_ended_latest_no_NAs_local_time, x = Master_ID_int_to_plot_low),
#   final_schedules_this_estab[!is.na(Master_ID_int)],
#   size = 1.5, color = "#4682b4", alpha = 0.6, show.legend = TRUE) +
geom_point(aes(y = time_local_time, x = Master_ID_int, color = ping_type, alpha = ping_type), all_known_pings, show.legend = TRUE) +
scale_color_manual(values = c("red", "#4682b4", "#3f5a36", "#444444"), breaks = c("break", "work", "Lower Bound", "Upper Bound")) +
scale_alpha_manual(values = c(0.6, 0.4, 0.8, 0.3), breaks = c("break", "work", "Lower Bound", "Upper Bound")) +
geom_linerange(aes(ymin = start, ymax = end, x = id, color = type, alpha = type), final_schedules_to_plot_long, size = 1.5, show.legend = TRUE) +
coord_flip() +
theme_cowplot() +
ylab("Local Time") +
theme(
axis.title.y = element_blank(),
plot.title = element_text(hjust = 0),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
plot.margin = margin(0.3,1.2,0.2,1.3, "cm"),
legend.position = "bottom",
legend.title = element_blank()
) +
ggtitle("Schedules by Worker") # +
# scale_x_continuous(breaks = -3:3, expand = expansion(mult = c(0, .1)))
ggsave("Kroger_Example_Schedules.png")
work_shifts_without_breaks[, breakless_spell_duration_lb := breakless_spell_ended_earliest_no_NAs - breakless_spell_began_latest_no_NAs]
work_shifts_without_breaks[, breakless_spell_duration_ub := breakless_spell_ended_latest_no_NAs - breakless_spell_began_earliest_no_NAs]
work_shifts_without_breaks[, breakless_spell_duration_lb_hours := as.integer(breakless_spell_duration_lb) / (60 * 60)]
work_shifts_without_breaks[, breakless_spell_duration_ub_hours := as.integer(breakless_spell_duration_ub) / (60 * 60)]
work_shifts_without_breaks[time_zones, on = .(Shape_ID), time_zone := i.time_zone]
what_looks_like_work_shifts = work_shifts_without_breaks[looks_like_a_work_shift == 1]
what_looks_like_work_shifts[, spell_began_earliest_local_time := my_tz_to_UTC(spell_began_earliest, time_zone), time_zone]
what_looks_like_work_shifts[, spell_began_latest_local_time := my_tz_to_UTC(spell_began_latest, time_zone), time_zone]
what_looks_like_work_shifts[, spell_ended_earliest_local_time := my_tz_to_UTC(spell_ended_earliest, time_zone), time_zone]
what_looks_like_work_shifts[, spell_ended_latest_local_time := my_tz_to_UTC(spell_ended_latest, time_zone), time_zone]
# Start times
ggplot(what_looks_like_work_shifts[
spell_began_earliest_local_time >= my_tz_to_UTC(as_datetime("2017-06-10 00:00:00 UTC"), "America/Los_Angeles") &
spell_began_earliest_local_time <= my_tz_to_UTC(as_datetime("2017-06-10 21:59:59 UTC"), "America/New_York") &
!is.na(spell_began_earliest_local_time)
]) +
geom_histogram(aes(x = spell_began_earliest_local_time), binwidth = 60 * 30) +
scale_y_continuous(expand =  expansion(mult = c(0, 0.05))) +
ggtitle("Shift Start Times") +
theme_cowplot() +
ylab("Count") +
xlab("Start Time (Local Time)") +
theme(
plot.title = element_text(hjust = 0)
)
ggsave("Shift_Start_Times_Hist.png")
ggplot(what_looks_like_work_shifts[
spell_ended_latest_local_time >= my_tz_to_UTC(as_datetime("2017-06-10 02:00:00 UTC"), "America/Los_Angeles") &
spell_ended_latest_local_time <= my_tz_to_UTC(as_datetime("2017-06-10 23:59:59 UTC"), "America/New_York") &
!is.na(spell_ended_latest_local_time)
]) +
geom_histogram(aes(x = spell_ended_latest_local_time), binwidth = 60 * 30)
# Shifts that start around 6 AM, what time do they end?
ggplot(what_looks_like_work_shifts[
spell_began_latest_local_time >= as_datetime("2017-06-10 05:30:00 UTC") &
spell_began_latest_local_time <= as_datetime("2017-06-10 06:30:00 UTC") &
spell_ended_earliest_local_time >= my_tz_to_UTC(as_datetime("2017-06-10 02:00:00 UTC"), "America/Los_Angeles") &
spell_ended_earliest_local_time <= my_tz_to_UTC(as_datetime("2017-06-10 23:59:59 UTC"), "America/New_York") &
!is.na(spell_ended_latest_local_time)
]) +
geom_histogram(aes(x = spell_ended_earliest_local_time), binwidth = 60 * 30) +
scale_y_continuous(expand =  expansion(mult = c(0, 0.05))) +
ggtitle("Ending Time of Shifts that Start at 6 AM") +
theme_cowplot() +
ylab("Count") +
xlab("Ending Time (Local Time)") +
theme(
plot.title = element_text(hjust = 0)
)
ggsave("End_Times_Conditional_on_6_AM_start.png")
ggplot(what_looks_like_work_shifts) +
geom_histogram(aes(x = breakless_spell_duration_lb_hours), binwidth = 0.5) +
scale_y_continuous(expand =  expansion(mult = c(0, 0.05))) +
ggtitle("Shift Duration") +
theme_cowplot() +
ylab("Count") +
xlab("Duration (Hours)") +
theme(
plot.title = element_text(hjust = 0)
)
ggsave("Shift_Durations.png")
ggplot(what_looks_like_work_shifts) +
geom_histogram(aes(x = breakless_spell_duration_lb_hours), bins = 44)
ggplot(what_looks_like_work_shifts) +
geom_histogram(aes(x = breakless_spell_duration_ub_hours), bins = 44)
ggplot(work_shifts_without_breaks[looks_like_a_work_shift == 1 & breakless_spell_duration_lb_hours >= 7 & breakless_spell_duration_lb_hours <= 9]) +
geom_histogram(aes(x = breakless_spell_duration_ub_hours), bins = 44)
what_looks_like_work_shifts[, diff_upper_lower_duration_hours := breakless_spell_duration_ub_hours - breakless_spell_duration_lb_hours]
ggplot(what_looks_like_work_shifts) +
geom_histogram(aes(x = diff_upper_lower_duration_hours), binwidth = 0.5) +
scale_y_continuous(expand =  expansion(mult = c(0, 0.05))) +
ggtitle("Uncertainty in Shift Duration") +
theme_cowplot() +
ylab("Count") +
xlab("Difference Between Lower Bound and Upper Bound on Shift Duration (Hours)") +
theme(
plot.title = element_text(hjust = 0)
)
ggsave("Shift_Duration_Uncertainty.png")
this_estab_worker_ids = unique(final_schedules_this_estab[looks_like_a_work_shift == TRUE]$Master_ID_PostFeb17)
this_estab_worker_ids
worker_ids_to_pull = data.table(Shape_ID = this_estab_shape_id, Worker_ID = this_estab_worker_ids)
worker_ids_to_pull
this_estab_shape_id = 136261 # 18186 #
final_schedules_this_estab = work_shifts_without_breaks[Shape_ID == this_estab_shape_id]
this_estab_worker_ids = unique(final_schedules_this_estab[looks_like_a_work_shift == TRUE]$Master_ID_PostFeb17)
worker_ids_to_pull = rbind(worker_ids_to_pull, data.table(Shape_ID = this_estab_shape_id, Worker_ID = this_estab_worker_ids))
worker_ids_to_pull
what_looks_like_work_shifts[, .(n_workers = .N), Shape_ID]
worker_count = what_looks_like_work_shifts[, .(n_workers = .N), Shape_ID]
worker_count[time_zones, on = .(Shape_ID), `:=`(latitude = i.latitude, longitude = i.longitude)]
worker_count
worker_count[latitude > 42.07518105049955 & latitude < 45.574, longitude < -117.06237905376751]
worker_count[latitude > 42.07518105049955 & latitude < 45.574 & longitude < -117.06237905376751]
worker_count[latitude > 42.07518105049955 & latitude < 45.574 & longitude < -117.06237905376751 & n_workers >= 6 & n_workers <= 10]
worker_count[latitude > 42.07518105049955 & latitude < 45.574 & longitude < -117.06237905376751 & n_workers >= 6 & n_workers <= 9]
worker_count[latitude > 42.07518105049955 & latitude < 45.574 & longitude < -117.06237905376751 & n_workers >= 6 & n_workers <= 10 & Shape_ID < 500000]
worker_count[latitude > 42.07518105049955 & latitude < 45.574 & longitude < -117.06237905376751 & n_workers >= 6 & n_workers <= 10 & Shape_ID < 120000]
worker_count[latitude > 42.07518105049955 & latitude < 45.574 & longitude < -117.06237905376751 & n_workers >= 6 & n_workers <= 10 & Shape_ID < 150000]
final_schedules_this_estab = work_shifts_without_breaks[Shape_ID %in% c(136261, 18186, 112748, 144224, 114944)]
this_estab_worker_ids = unique(final_schedules_this_estab[looks_like_a_work_shift == TRUE]$Master_ID_PostFeb17)
this_estab_worker_ids
worker_ids_to_pull_final = unique(final_schedules_this_estab[looks_like_a_work_shift == TRUE, .(Shape_ID, Master_ID_PostFeb17)])
worker_ids_to_pull_final
# 18186 # (Indiana Kroger) #
# 112748 # (Oregon Costco)
# 144224 # (Oregon Nordstrom)
# 114944 # (Oregon Fred Meyer)
# final_schedules_this_estab = work_shifts_without_breaks[Shape_ID %in% c(136261, 18186, 112748, 144224, 114944)]
# worker_ids_to_pull_final = unique(final_schedules_this_estab[looks_like_a_work_shift == TRUE, .(Shape_ID, Master_ID_PostFeb17)])
fwrite(worker_ids_to_pull_final, "Worker_IDs_to_Pull.csv")
this_estab_shape_id = 136261 # (Orange County Bloomingdale's)
final_schedules_this_estab = work_shifts_without_breaks[Shape_ID  == this_estab_shape_id]
this_estab_worker_ids = unique(final_schedules_this_estab[looks_like_a_work_shift == TRUE]$Master_ID_PostFeb17)
quantile(what_looks_like_work_shifts$diff_upper_lower_duration_hours, 0.8)
quantile(what_looks_like_work_shifts$diff_upper_lower_duration_hours, 0.77)
quantile(what_looks_like_work_shifts$diff_upper_lower_duration_hours, 0.79)
quantile(what_looks_like_work_shifts$diff_upper_lower_duration_hours, 0.75)
quantile(what_looks_like_work_shifts$diff_upper_lower_duration_hours, 0.755)
quantile(what_looks_like_work_shifts$diff_upper_lower_duration_hours, 0.754)
quantile(what_looks_like_work_shifts$diff_upper_lower_duration_hours, 0.7534)
quantile(what_looks_like_work_shifts$diff_upper_lower_duration_hours, 0.7535)
ggplot(what_looks_like_work_shifts) +
geom_histogram(aes(x = breakless_spell_duration_lb_hours), binwidth = 0.5) +
scale_y_continuous(expand =  expansion(mult = c(0, 0.05))) +
ggtitle("Shift Durations (Lower Bound)") +
theme_cowplot() +
ylab("Count") +
xlab("Duration (Hours)") +
theme(
plot.title = element_text(hjust = 0)
)
ggsave("Shift_Durations.png")
final_schedules_to_plot_long
# Suppose state 1 lowers it's tax apportionment rate, everyone uses 100% sales apportionment
price_dt = data.table()
firm_1_data = data.table(state = 1, firm_id = 1, year = c(0, 1), price = c(1, 1), quantity = c(1, 1))
firm_2_data = data.table(state = c(1, 1, 2, 2), firm_id = 2, year = c(0, 1, 0, 1), price = c(1, 0.9, 1, 1.1), quantity = c(1, 1.1, 1, 0.9))
firm_3_data = data.table(state = c(2, 2, 3, 3), firm_id = 3, year = c(0, 1, 0, 1), price = c(1, 1, 1, 1), quantity = c(1, 1, 1, 1))
firm_4_data = data.table(state = c(1, 1, 2, 2, 3, 3), firm_id = 4, year = c(0, 1, 0, 1, 0, 1), price = c(1, 0.94, 1, 1.03, 1, 1.03), quantity = c(1, 1, 1, 1, 1, 1))
price_dt_exog_p_q = rbind(
firm_1_data, firm_2_data, firm_3_data, firm_4_data
)
tax_dt = data.table(
state = c(1, 2, 3, 1, 2, 3),
sales_weight = c(1, 1, 1, 1, 1, 1),
payroll_weight = c(0, 0, 0, 0, 0, 0),
property_weight = c(0, 0, 0, 0, 0, 0),
tax_rate = c(0.1, 0.2, 0.3, 0.1, 0.2, 0.3),
year = c(0, 0, 0, 1, 1, 1)
)
overall_dt_exog_p_q = merge(price_dt_exog_p_q, tax_dt, on = c("state", "year"))
overall_dt_exog_p_q = merge(price_dt_exog_p_q, tax_dt, by = c("state", "year"))
overall_dt_exog_p_q
rm(schedules)
rm(jun10)
# Suppose state 1 lowers it's tax apportionment rate, everyone uses 100% sales apportionment
firm_1_data = data.table(state = 1, firm_id = 1, year = c(0, 1), price = c(1, 1), quantity = c(1, 1))
firm_2_data = data.table(state = c(1, 1, 2, 2), firm_id = 2, year = c(0, 1, 0, 1), price = c(1, 0.9, 1, 1.1), quantity = c(1, 1.1, 1, 0.9))
firm_3_data = data.table(state = c(2, 2, 3, 3), firm_id = 3, year = c(0, 1, 0, 1), price = c(1, 1, 1, 1), quantity = c(1, 1, 1, 1))
firm_4_data = data.table(state = c(1, 1, 2, 2, 3, 3), firm_id = 4, year = c(0, 1, 0, 1, 0, 1), price = c(1, 0.94, 1, 1.03, 1, 1.03), quantity = c(1, 1, 1, 1, 1, 1))
price_dt_p_q_exog = rbind(
firm_1_data, firm_2_data, firm_3_data, firm_4_data
)
tax_dt = data.table(
state = c(1, 2, 3, 1, 2, 3),
sales_weight = c(1, 1, 1, 1, 1, 1),
payroll_weight = c(0, 0, 0, 0, 0, 0),
property_weight = c(0, 0, 0, 0, 0, 0),
tax_rate = c(0.1, 0.2, 0.3, 0.1, 0.2, 0.3),
year = c(0, 0, 0, 1, 1, 1)
)
overall_dt_exog_p_q = merge(price_dt_p_q_exog, tax_dt, by = c("state", "year"))
# Now let quantities be a function of elasticities of demand to the firm that are fixed at the firm-state level
firm_1_data = data.table(state = 1, firm_id = 1, year = c(0, 1), price = c(1, 1))
firm_2_data = data.table(state = c(1, 1, 2, 2), firm_id = 2, year = c(0, 1, 0, 1), price = c(1, 0.9, 1, 1.1))
firm_3_data = data.table(state = c(2, 2, 3, 3), firm_id = 3, year = c(0, 1, 0, 1), price = c(1, 1, 1, 1))
firm_4_data = data.table(state = c(1, 1, 2, 2, 3, 3), firm_id = 4, year = c(0, 1, 0, 1, 0, 1), price = c(1, 0.94, 1, 1.03, 1, 1.03))
firm_state_elasticities = data.table(
firm_id = c(1, 2, 2, 3, 3, 3, 4, 4, 4),
state = c(1, 1, 2, 2, 3, 1, 2, 3),
elasticity = c(-4, -5, -6, -4, -6, -5, -5, -6, -4)
)
prices_dt_p_exog_q_from_elasticity = rbind(
firm_1_data, firm_2_data, firm_3_data, firm_4_data
)
prices_dt_p_exog_q_from_elasticity[firm_state_elasticities, on = .(state, firm_id), elasticity := i.elasticity]
prices_dt_p_exog_q_from_elasticity[, quantity := price ^ elasticity]
tax_dt = data.table(
state = c(1, 2, 3, 1, 2, 3),
sales_weight = c(1, 1, 1, 1, 1, 1),
payroll_weight = c(0, 0, 0, 0, 0, 0),
property_weight = c(0, 0, 0, 0, 0, 0),
tax_rate = c(0.1, 0.2, 0.3, 0.1, 0.2, 0.3),
year = c(0, 0, 0, 1, 1, 1)
)
overall_dt_p_exog_q_from_elasticity = merge(prices_dt_p_exog_q_from_elasticity, tax_dt, by = c("state", "year"))
# Suppose state 1 lowers it's tax apportionment rate, everyone uses 100% sales apportionment
firm_1_data = data.table(state = 1, firm_id = 1, year = c(0, 1), price = c(1, 1), quantity = c(1, 1))
firm_2_data = data.table(state = c(1, 1, 2, 2), firm_id = 2, year = c(0, 1, 0, 1), price = c(1, 0.9, 1, 1.1), quantity = c(1, 1.1, 1, 0.9))
firm_3_data = data.table(state = c(2, 2, 3, 3), firm_id = 3, year = c(0, 1, 0, 1), price = c(1, 1, 1, 1), quantity = c(1, 1, 1, 1))
firm_4_data = data.table(state = c(1, 1, 2, 2, 3, 3), firm_id = 4, year = c(0, 1, 0, 1, 0, 1), price = c(1, 0.94, 1, 1.03, 1, 1.03), quantity = c(1, 1, 1, 1, 1, 1))
price_dt_p_q_exog = rbind(
firm_1_data, firm_2_data, firm_3_data, firm_4_data
)
tax_dt = data.table(
state = c(1, 2, 3, 1, 2, 3),
sales_weight = c(1, 1, 1, 1, 1, 1),
payroll_weight = c(0, 0, 0, 0, 0, 0),
property_weight = c(0, 0, 0, 0, 0, 0),
tax_rate = c(0.1, 0.2, 0.3, 0.1, 0.2, 0.3),
year = c(0, 0, 0, 1, 1, 1)
)
overall_dt_exog_p_q = merge(price_dt_p_q_exog, tax_dt, by = c("state", "year"))
# Now let quantities be a function of elasticities of demand to the firm that are fixed at the firm-state level
firm_1_data = data.table(state = 1, firm_id = 1, year = c(0, 1), price = c(1, 1))
firm_2_data = data.table(state = c(1, 1, 2, 2), firm_id = 2, year = c(0, 1, 0, 1), price = c(1, 0.9, 1, 1.1))
firm_3_data = data.table(state = c(2, 2, 3, 3), firm_id = 3, year = c(0, 1, 0, 1), price = c(1, 1, 1, 1))
firm_4_data = data.table(state = c(1, 1, 2, 2, 3, 3), firm_id = 4, year = c(0, 1, 0, 1, 0, 1), price = c(1, 0.94, 1, 1.03, 1, 1.03))
firm_state_elasticities = data.table(
firm_id = c(1, 2, 2, 3, 3, 4, 4, 4),
state = c(1, 1, 2, 2, 3, 1, 2, 3),
elasticity = c(-4, -5, -6, -4, -5.5, -5, -6, -4)
)
prices_dt_p_exog_q_from_elasticity = rbind(
firm_1_data, firm_2_data, firm_3_data, firm_4_data
)
prices_dt_p_exog_q_from_elasticity[firm_state_elasticities, on = .(state, firm_id), elasticity := i.elasticity]
prices_dt_p_exog_q_from_elasticity[, quantity := price ^ elasticity]
tax_dt = data.table(
state = c(1, 2, 3, 1, 2, 3),
sales_weight = c(1, 1, 1, 1, 1, 1),
payroll_weight = c(0, 0, 0, 0, 0, 0),
property_weight = c(0, 0, 0, 0, 0, 0),
tax_rate = c(0.1, 0.2, 0.3, 0.1, 0.2, 0.3),
year = c(0, 0, 0, 1, 1, 1)
)
overall_dt_p_exog_q_from_elasticity = merge(prices_dt_p_exog_q_from_elasticity, tax_dt, by = c("state", "year"))
overall_dt_p_exog_q_from_elasticity
# Suppose state 1 lowers it's tax apportionment rate, everyone uses 100% sales apportionment
firm_1_data = data.table(state = 1, firm_id = 1, year = c(0, 1), price = c(2, 2), quantity = c(1, 1))
firm_2_data = data.table(state = c(1, 1, 2, 2), firm_id = 2, year = c(0, 1, 0, 1), price = c(2, 1.9, 2, 2.1), quantity = c(1, 1.1, 1, 0.9))
firm_3_data = data.table(state = c(2, 2, 3, 3), firm_id = 3, year = c(0, 1, 0, 1), price = c(2, 2, 2, 2), quantity = c(1, 1, 1, 1))
firm_4_data = data.table(state = c(1, 1, 2, 2, 3, 3), firm_id = 4, year = c(0, 1, 0, 1, 0, 1), price = c(2, 1.94, 2, 2.03, 2, 2.03), quantity = c(1, 1, 1, 1, 1, 1))
price_dt_p_q_exog = rbind(
firm_1_data, firm_2_data, firm_3_data, firm_4_data
)
firm_state_costs = data.table(
firm_id = c(1, 2, 2, 3, 3, 4, 4, 4),
state = c(1, 1, 2, 2, 3, 1, 2, 3),
elasticity = 1
)
tax_dt = data.table(
state = c(1, 2, 3, 1, 2, 3),
sales_weight = c(1, 1, 1, 1, 1, 1),
payroll_weight = c(0, 0, 0, 0, 0, 0),
property_weight = c(0, 0, 0, 0, 0, 0),
tax_rate = c(0.1, 0.2, 0.3, 0.1, 0.2, 0.3),
year = c(0, 0, 0, 1, 1, 1)
)
overall_dt_exog_p_q = merge(
merge(price_dt_p_q_exog, tax_dt, by = c("state", "year")),
firm_state_costs,
by = c("state", "firm")
)
# Suppose state 1 lowers it's tax apportionment rate, everyone uses 100% sales apportionment
firm_1_data = data.table(state = 1, firm_id = 1, year = c(0, 1), price = c(2, 2), quantity = c(1, 1))
firm_2_data = data.table(state = c(1, 1, 2, 2), firm_id = 2, year = c(0, 1, 0, 1), price = c(2, 1.9, 2, 2.1), quantity = c(1, 1.1, 1, 0.9))
firm_3_data = data.table(state = c(2, 2, 3, 3), firm_id = 3, year = c(0, 1, 0, 1), price = c(2, 2, 2, 2), quantity = c(1, 1, 1, 1))
firm_4_data = data.table(state = c(1, 1, 2, 2, 3, 3), firm_id = 4, year = c(0, 1, 0, 1, 0, 1), price = c(2, 1.94, 2, 2.03, 2, 2.03), quantity = c(1, 1, 1, 1, 1, 1))
price_dt_p_q_exog = rbind(
firm_1_data, firm_2_data, firm_3_data, firm_4_data
)
firm_state_costs = data.table(
firm_id = c(1, 2, 2, 3, 3, 4, 4, 4),
state = c(1, 1, 2, 2, 3, 1, 2, 3),
elasticity = 1
)
tax_dt = data.table(
state = c(1, 2, 3, 1, 2, 3),
sales_weight = c(1, 1, 1, 1, 1, 1),
payroll_weight = c(0, 0, 0, 0, 0, 0),
property_weight = c(0, 0, 0, 0, 0, 0),
tax_rate = c(0.1, 0.2, 0.3, 0.1, 0.2, 0.3),
year = c(0, 0, 0, 1, 1, 1)
)
overall_dt_exog_p_q = merge(
merge(price_dt_p_q_exog, tax_dt, by = c("state", "year")),
firm_state_costs,
by = c("state", "firm_id")
)
rm(work_shifts_without_breaks)
rm(time_zones)
rm(what_looks_like_work_shifts)
rm(worker_count)
# Suppose state 1 lowers it's tax apportionment rate, everyone uses 100% sales apportionment
firm_1_data = data.table(state = 1, firm_id = 1, year = c(0, 1), price_p_exog = c(2, 2), quantity_p_exog_q_exog = c(1, 1))
firm_2_data = data.table(state = c(1, 1, 2, 2), firm_id = 2, year = c(0, 1, 0, 1), price_p_exog = c(2, 1.9, 2, 2.1), quantity_p_exog_q_exog = c(1, 1.1, 1, 0.9))
firm_3_data = data.table(state = c(2, 2, 3, 3), firm_id = 3, year = c(0, 1, 0, 1), price_p_exog = c(2, 2, 2, 2), quantity_p_exog_q_exog = c(1, 1, 1, 1))
firm_4_data = data.table(state = c(1, 1, 2, 2, 3, 3), firm_id = 4, year = c(0, 1, 0, 1, 0, 1), price_p_exog = c(2, 1.94, 2, 2.03, 2, 2.03), quantity_p_exog_q_exog = c(1, 1, 1, 1, 1, 1))
tax = data.table(
state = c(1, 2, 3, 1, 2, 3),
sales_weight = c(1, 1, 1, 1, 1, 1),
payroll_weight = c(0, 0, 0, 0, 0, 0),
property_weight = c(0, 0, 0, 0, 0, 0),
tax_rate = c(0.1, 0.2, 0.3, 0.1, 0.2, 0.3),
year = c(0, 0, 0, 1, 1, 1)
)
firm_state_elasticities = data.table(
firm_id = c(1, 2, 2, 3, 3, 4, 4, 4),
state = c(1, 1, 2, 2, 3, 1, 2, 3),
elasticity = c(-4, -5, -6, -4, -5.5, -5, -6, -4)
)
firm_state_costs = data.table(
firm_id = c(1, 2, 2, 3, 3, 4, 4, 4),
state = c(1, 1, 2, 2, 3, 1, 2, 3),
elasticity = 1
)
firm_characteristics = rbind(
firm_1_data, firm_2_data, firm_3_data, firm_4_data
)
overall = merge(
merge(firm_characteristics, tax, by = c("state", "year")),
firm_state_costs,
by = c("state", "firm_id")
)
# Now let quantities be a function of elasticities of demand to the firm that are fixed at the firm-state level
overall[, quantity_p_exog_q_from_elasticity := price ^ elasticity]
overall[, quantity_p_exog_q_from_elasticity := price_p_exog ^ elasticity]
fwrite(overall, "SFA_data_to_analyze.csv")
getwd()
setwd("C:/Users/Nathan/Dropbox/SFA")
list.files
list.files()
